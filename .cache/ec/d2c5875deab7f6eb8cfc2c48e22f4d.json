{"id":"node_modules/@bikeshaving/crank/cjs/dom.js","dependencies":[{"name":"/Users/sekdemir/CodeWorks/hobby/crank/node_modules/@bikeshaving/crank/cjs/dom.js.map","includedInParent":true,"mtime":1587766456157},{"name":"/Users/sekdemir/CodeWorks/hobby/crank/package.json","includedInParent":true,"mtime":1587766485304},{"name":"/Users/sekdemir/CodeWorks/hobby/crank/.babelrc","includedInParent":true,"mtime":1587766155824},{"name":"/Users/sekdemir/CodeWorks/hobby/crank/node_modules/@bikeshaving/crank/package.json","includedInParent":true,"mtime":1587766456157},{"name":"./index-454299da.js","loc":{"line":5,"column":20},"parent":"/Users/sekdemir/CodeWorks/hobby/crank/node_modules/@bikeshaving/crank/cjs/dom.js","resolved":"/Users/sekdemir/CodeWorks/hobby/crank/node_modules/@bikeshaving/crank/cjs/index-454299da.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar index = require('./index-454299da.js');\n\nvar _a;\r\n// TODO: create an allowlist/blocklist of props\r\nfunction updateProps(el, props, newProps) {\r\n    for (var name_1 in index.__assign(index.__assign({}, props), newProps)) {\r\n        var value = props[name_1];\r\n        var newValue = newProps[name_1];\r\n        switch (true) {\r\n            case name_1 === \"children\":\r\n                break;\r\n            case name_1 === \"class\":\r\n            case name_1 === \"className\": {\r\n                el[\"className\"] = newValue;\r\n                break;\r\n            }\r\n            case name_1 === \"style\" && \"style\" in el: {\r\n                var style = el.style;\r\n                if (newValue == null) {\r\n                    el.removeAttribute(\"style\");\r\n                }\r\n                else if (typeof newValue === \"string\") {\r\n                    style.cssText = newValue;\r\n                }\r\n                else {\r\n                    for (var styleName in Object.assign({}, value, newValue)) {\r\n                        var styleValue = value && value[styleName];\r\n                        var newStyleValue = newValue && newValue[styleName];\r\n                        if (newStyleValue == null) {\r\n                            style.removeProperty(styleName);\r\n                        }\r\n                        else if (styleValue !== newStyleValue) {\r\n                            style.setProperty(styleName, newStyleValue);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                if (name_1 in el) {\r\n                    el[name_1] = newValue;\r\n                    break;\r\n                }\r\n                else if (newValue === true) {\r\n                    el.setAttribute(name_1, \"\");\r\n                }\r\n                else if (newValue === false || newValue == null) {\r\n                    el.removeAttribute(name_1);\r\n                }\r\n                else {\r\n                    el.setAttribute(name_1, newValue);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n// TODO: improve this algorithm\r\n// https://stackoverflow.com/questions/59418120/what-is-the-most-efficient-way-to-update-the-childnodes-of-a-dom-node-with-an-ar\r\nfunction updateChildren(el, children) {\r\n    var e_1, _a, e_2, _b;\r\n    if (el.childNodes.length === 0) {\r\n        var fragment = document.createDocumentFragment();\r\n        try {\r\n            for (var children_1 = index.__values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\r\n                var child = children_1_1.value;\r\n                if (typeof child === \"string\") {\r\n                    child = document.createTextNode(child);\r\n                }\r\n                fragment.appendChild(child);\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        el.appendChild(fragment);\r\n        return;\r\n    }\r\n    var oldChild = el.firstChild;\r\n    try {\r\n        for (var children_2 = index.__values(children), children_2_1 = children_2.next(); !children_2_1.done; children_2_1 = children_2.next()) {\r\n            var newChild = children_2_1.value;\r\n            if (oldChild === null) {\r\n                el.appendChild(typeof newChild === \"string\"\r\n                    ? document.createTextNode(newChild)\r\n                    : newChild);\r\n            }\r\n            else if (typeof newChild === \"string\") {\r\n                if (oldChild.nodeType === Node.TEXT_NODE) {\r\n                    if (oldChild.nodeValue !== newChild) {\r\n                        oldChild.nodeValue = newChild;\r\n                    }\r\n                    oldChild = oldChild.nextSibling;\r\n                }\r\n                else {\r\n                    el.insertBefore(document.createTextNode(newChild), oldChild);\r\n                }\r\n            }\r\n            else if (oldChild !== newChild) {\r\n                el.insertBefore(newChild, oldChild);\r\n            }\r\n            else {\r\n                oldChild = oldChild.nextSibling;\r\n            }\r\n        }\r\n    }\r\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n    finally {\r\n        try {\r\n            if (children_2_1 && !children_2_1.done && (_b = children_2.return)) _b.call(children_2);\r\n        }\r\n        finally { if (e_2) throw e_2.error; }\r\n    }\r\n    while (oldChild !== null) {\r\n        var nextSibling = oldChild.nextSibling;\r\n        el.removeChild(oldChild);\r\n        oldChild = nextSibling;\r\n    }\r\n}\r\nfunction createDocumentFragmentFromHTML(html) {\r\n    if (typeof document.createRange === \"function\") {\r\n        return document.createRange().createContextualFragment(html);\r\n    }\r\n    else {\r\n        var fragment = document.createDocumentFragment();\r\n        var childNodes = new DOMParser().parseFromString(html, \"text/html\").body\r\n            .childNodes;\r\n        for (var i = 0; i < childNodes.length; i++) {\r\n            fragment.appendChild(childNodes[i]);\r\n        }\r\n        return fragment;\r\n    }\r\n}\r\n// TODO: Element should be ParentNode maybe?\r\nvar env = (_a = {},\r\n    _a[index.Default] = function (tag) {\r\n        return function defaultDOM() {\r\n            var node, props, nextProps, children, nextChildren, _a, _b, _c, e_3_1;\r\n            var e_3, _d;\r\n            return index.__generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        node = document.createElement(tag);\r\n                        props = {};\r\n                        children = [];\r\n                        _e.label = 1;\r\n                    case 1:\r\n                        _e.trys.push([1, 6, 7, 8]);\r\n                        _a = index.__values(this), _b = _a.next();\r\n                        _e.label = 2;\r\n                    case 2:\r\n                        if (!!_b.done) return [3 /*break*/, 5];\r\n                        _c = _b.value;\r\n                        (nextChildren = _c.children, nextProps = index.__rest(_c, [\"children\"]));\r\n                        updateProps(node, props, nextProps);\r\n                        props = nextProps;\r\n                        if (!(\"innerHTML\" in nextProps) &&\r\n                            (children.length > 0 || nextChildren.length > 0)) {\r\n                            updateChildren(node, nextChildren);\r\n                            children = nextChildren;\r\n                        }\r\n                        return [4 /*yield*/, node];\r\n                    case 3:\r\n                        _e.sent();\r\n                        _e.label = 4;\r\n                    case 4:\r\n                        _b = _a.next();\r\n                        return [3 /*break*/, 2];\r\n                    case 5: return [3 /*break*/, 8];\r\n                    case 6:\r\n                        e_3_1 = _e.sent();\r\n                        e_3 = { error: e_3_1 };\r\n                        return [3 /*break*/, 8];\r\n                    case 7:\r\n                        try {\r\n                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\r\n                        }\r\n                        finally { if (e_3) throw e_3.error; }\r\n                        return [7 /*endfinally*/];\r\n                    case 8: return [2 /*return*/];\r\n                }\r\n            });\r\n        };\r\n    },\r\n    _a[index.Raw] = function (_a) {\r\n        var value = _a.value;\r\n        if (typeof value === \"string\") {\r\n            // TODO: figure out what the type of element should actually be\r\n            return createDocumentFragmentFromHTML(value);\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    },\r\n    _a[index.Portal] = function (_a) {\r\n        var _b, _c, _d, newRoot, children, e_4_1;\r\n        var e_4, _e;\r\n        var root = _a.root;\r\n        return index.__generator(this, function (_f) {\r\n            switch (_f.label) {\r\n                case 0:\r\n                    if (root == null) {\r\n                        throw new TypeError(\"Portal element is missing root node\");\r\n                    }\r\n                    _f.label = 1;\r\n                case 1:\r\n                    _f.trys.push([1, , 10, 11]);\r\n                    _f.label = 2;\r\n                case 2:\r\n                    _f.trys.push([2, 7, 8, 9]);\r\n                    _b = index.__values(this), _c = _b.next();\r\n                    _f.label = 3;\r\n                case 3:\r\n                    if (!!_c.done) return [3 /*break*/, 6];\r\n                    _d = _c.value, newRoot = _d.root, children = _d.children;\r\n                    if (newRoot == null) {\r\n                        throw new TypeError(\"Portal element is missing root node\");\r\n                    }\r\n                    if (root !== newRoot) {\r\n                        updateChildren(root, []);\r\n                        root = newRoot;\r\n                    }\r\n                    updateChildren(root, children);\r\n                    return [4 /*yield*/, root];\r\n                case 4:\r\n                    _f.sent();\r\n                    _f.label = 5;\r\n                case 5:\r\n                    _c = _b.next();\r\n                    return [3 /*break*/, 3];\r\n                case 6: return [3 /*break*/, 9];\r\n                case 7:\r\n                    e_4_1 = _f.sent();\r\n                    e_4 = { error: e_4_1 };\r\n                    return [3 /*break*/, 9];\r\n                case 8:\r\n                    try {\r\n                        if (_c && !_c.done && (_e = _b.return)) _e.call(_b);\r\n                    }\r\n                    finally { if (e_4) throw e_4.error; }\r\n                    return [7 /*endfinally*/];\r\n                case 9: return [3 /*break*/, 11];\r\n                case 10:\r\n                    updateChildren(root, []);\r\n                    return [7 /*endfinally*/];\r\n                case 11: return [2 /*return*/];\r\n            }\r\n        });\r\n    },\r\n    _a);\r\nvar DOMRenderer = /** @class */ (function (_super) {\r\n    index.__extends(DOMRenderer, _super);\r\n    function DOMRenderer() {\r\n        return _super.call(this, env) || this;\r\n    }\r\n    return DOMRenderer;\r\n}(index.Renderer));\r\nvar renderer = new DOMRenderer();\n\nexports.DOMRenderer = DOMRenderer;\nexports.env = env;\nexports.renderer = renderer;\n\n"},"sourceMaps":{"js":{"version":3,"file":"dom.js","sources":[],"sourcesContent":[],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}},"error":null,"hash":"fb5f1ad124510344b26e0126fb1870de","cacheData":{"env":{}}}